// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelLibrary.DBModels;

#nullable disable

namespace ModelLibrary.Migrations
{
    [DbContext(typeof(WoTaasContext))]
    [Migration("20230814120154_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ModelLibrary.DBModels.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TokenId")
                        .HasColumnType("int")
                        .HasColumnName("token_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TokenId" }, "IX_account_roles_token_id");

                    b.ToTable("account_roles", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.AdminAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("admin_account", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.AtlassianToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("access_token");

                    b.Property<string>("AccountInstalledId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account_installed_id");

                    b.Property<string>("CloudId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cloud_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefressToken")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("refress_token");

                    b.Property<string>("Site")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("site");

                    b.Property<string>("UserToken")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_token");

                    b.HasKey("Id");

                    b.ToTable("atlassian_token", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CloudId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cloud_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.ToTable("equipments", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.EquipmentsFunction", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int")
                        .HasColumnName("function_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("EquipmentId", "FunctionId")
                        .HasName("PK_equipments_function_1");

                    b.HasIndex(new[] { "FunctionId" }, "IX_equipments_function_function_id");

                    b.ToTable("equipments_function", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CloudId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cloud_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("function", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Log", b =>
                {
                    b.Property<string>("ExceptionSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThreadId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Milestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProjectId" }, "IX_milestones_project_id");

                    b.ToTable("milestones", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Budget")
                        .HasColumnType("int")
                        .HasColumnName("budget");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime")
                        .HasColumnName("deadline");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ObjectiveCost")
                        .HasColumnType("int")
                        .HasColumnName("objective_cost");

                    b.Property<int?>("ObjectiveQuality")
                        .HasColumnType("int")
                        .HasColumnName("objective_quality");

                    b.Property<int?>("ObjectiveTime")
                        .HasColumnType("int")
                        .HasColumnName("objective_time");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProjectId" }, "IX_parameter_project_id");

                    b.ToTable("parameter", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.ParameterResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_id");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int")
                        .HasColumnName("resource_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParameterId" }, "IX_parameter_resource_parameter_id");

                    b.HasIndex(new[] { "ResourceId" }, "IX_parameter_resource_resource_id");

                    b.ToTable("parameter_resource", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.PlanPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Permission")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("permission");

                    b.Property<int?>("PlanSubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("plan_subscription_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlanSubscriptionId" }, "IX_plan_permissions_plan_subscription_id");

                    b.ToTable("plan_permissions", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.PlanSubscription", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("plan_subscription", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account_id");

                    b.Property<double?>("BaseWorkingHour")
                        .HasColumnType("float")
                        .HasColumnName("base_working_hour");

                    b.Property<double?>("Budget")
                        .HasColumnType("float")
                        .HasColumnName("budget");

                    b.Property<string>("BudgetUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("budget_unit");

                    b.Property<string>("CloudId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cloud_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime")
                        .HasColumnName("deadline");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<string>("ImageAvatar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image_avatar");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double?>("ObjectiveCost")
                        .HasColumnType("float")
                        .HasColumnName("objective_cost");

                    b.Property<double?>("ObjectiveQuality")
                        .HasColumnType("float")
                        .HasColumnName("objective_quality");

                    b.Property<double?>("ObjectiveTime")
                        .HasColumnType("float")
                        .HasColumnName("objective_time");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("WorkingTimes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("working_times");

                    b.HasKey("Id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CloudId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cloud_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account_id");

                    b.Property<int?>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<string>("Desciption")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("desciption");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_id");

                    b.Property<int?>("Quality")
                        .HasColumnType("int")
                        .HasColumnName("quality");

                    b.Property<int?>("Selected")
                        .HasColumnType("int")
                        .HasColumnName("selected");

                    b.Property<DateTime?>("Since")
                        .HasColumnType("datetime")
                        .HasColumnName("since");

                    b.Property<string>("Tasks")
                        .HasColumnType("text")
                        .HasColumnName("tasks");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<int?>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParameterId" }, "IX_schedules_parameter_id");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CloudId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cloud_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AtlassianTokenId")
                        .HasColumnType("int")
                        .HasColumnName("atlassian_token_id");

                    b.Property<DateTime?>("CancelAt")
                        .HasColumnType("datetime")
                        .HasColumnName("cancel_at");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("CurrentPeriodEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("current_period_end");

                    b.Property<DateTime?>("CurrentPeriodStart")
                        .HasColumnType("datetime")
                        .HasColumnName("current_period_start");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<string>("Token")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AtlassianTokenId" }, "IX_subscription_atlassian_token_id");

                    b.HasIndex(new[] { "PlanId" }, "IX_subscription_plan_id");

                    b.ToTable("subscription", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CloudId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cloud_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<double?>("Duration")
                        .HasColumnType("float")
                        .HasColumnName("duration");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("MilestoneId")
                        .HasColumnType("int")
                        .HasColumnName("milestone_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MilestoneId" }, "IX_tasks_milestone_id");

                    b.HasIndex(new[] { "ProjectId" }, "IX_tasks_project_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.TaskFunction", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int")
                        .HasColumnName("function_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("RequireTime")
                        .HasColumnType("int")
                        .HasColumnName("require_time");

                    b.HasKey("TaskId", "FunctionId");

                    b.HasIndex(new[] { "FunctionId" }, "IX_task_function_function_id");

                    b.ToTable("task_function", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.TaskPrecedence", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<int>("PrecedenceId")
                        .HasColumnType("int")
                        .HasColumnName("precedence_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("TaskId", "PrecedenceId");

                    b.HasIndex(new[] { "PrecedenceId" }, "IX_task_precedences_precedence_id");

                    b.ToTable("task_precedences", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.TasksSkillsRequired", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.HasKey("TaskId", "SkillId");

                    b.HasIndex(new[] { "SkillId" }, "IX_tasks_skills_required_skill_id");

                    b.ToTable("tasks_skills_required", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Workforce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account_type");

                    b.Property<int?>("Active")
                        .HasColumnType("int")
                        .HasColumnName("active");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("avatar");

                    b.Property<string>("CloudId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cloud_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double?>("UnitSalary")
                        .HasColumnType("float")
                        .HasColumnName("unit_salary");

                    b.Property<string>("WorkingEffort")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("working_effort");

                    b.Property<int?>("WorkingType")
                        .HasColumnType("int")
                        .HasColumnName("working_type");

                    b.HasKey("Id");

                    b.ToTable("workforce", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.WorkforceSkill", b =>
                {
                    b.Property<int>("WorkforceId")
                        .HasColumnType("int")
                        .HasColumnName("workforce_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.Property<DateTime?>("CreateDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("delete_datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.HasKey("WorkforceId", "SkillId");

                    b.HasIndex(new[] { "SkillId" }, "IX_workforce_skills_skill_id");

                    b.ToTable("workforce_skills", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.DBModels.AccountRole", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.AtlassianToken", "Token")
                        .WithMany("AccountRoles")
                        .HasForeignKey("TokenId")
                        .HasConstraintName("FK_account_roles_atlassian_token");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.EquipmentsFunction", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Equipment", "Equipment")
                        .WithMany("EquipmentsFunctions")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_equipments_function_equipments");

                    b.HasOne("ModelLibrary.DBModels.Function", "Function")
                        .WithMany("EquipmentsFunctions")
                        .HasForeignKey("FunctionId")
                        .IsRequired()
                        .HasConstraintName("FK_equipments_function_function");

                    b.Navigation("Equipment");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Milestone", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_milestones_projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Parameter", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Project", "Project")
                        .WithMany("Parameters")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_parameter_projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.ParameterResource", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Parameter", "Parameter")
                        .WithMany("ParameterResources")
                        .HasForeignKey("ParameterId")
                        .IsRequired()
                        .HasConstraintName("FK_parameter_resource_parameter");

                    b.HasOne("ModelLibrary.DBModels.Workforce", "Resource")
                        .WithMany("ParameterResources")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("FK_project_resource_workforce");

                    b.Navigation("Parameter");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.PlanPermission", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.PlanSubscription", "PlanSubscription")
                        .WithMany("PlanPermissions")
                        .HasForeignKey("PlanSubscriptionId")
                        .HasConstraintName("FK__PlanPermi__plan___44952D46");

                    b.Navigation("PlanSubscription");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Schedule", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Parameter", "Parameter")
                        .WithMany("Schedules")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("FK__schedules__param__607251E5");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Subscription", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.AtlassianToken", "AtlassianToken")
                        .WithMany("Subscriptions")
                        .HasForeignKey("AtlassianTokenId")
                        .HasConstraintName("FK_subscription_atlassian_token");

                    b.HasOne("ModelLibrary.DBModels.PlanSubscription", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_subscription_plan_subscription");

                    b.Navigation("AtlassianToken");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Task", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Milestone", "Milestone")
                        .WithMany("Tasks")
                        .HasForeignKey("MilestoneId")
                        .HasConstraintName("FK_tasks_milestones");

                    b.HasOne("ModelLibrary.DBModels.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_tasks_projects");

                    b.Navigation("Milestone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.TaskFunction", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Function", "Function")
                        .WithMany("TaskFunctions")
                        .HasForeignKey("FunctionId")
                        .IsRequired()
                        .HasConstraintName("FK_task_function_function");

                    b.HasOne("ModelLibrary.DBModels.Task", "Task")
                        .WithMany("TaskFunctions")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_task_function_tasks");

                    b.Navigation("Function");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.TaskPrecedence", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Task", "Precedence")
                        .WithMany("TaskPrecedencePrecedences")
                        .HasForeignKey("PrecedenceId")
                        .IsRequired()
                        .HasConstraintName("FK_task_precedences_tasks3");

                    b.HasOne("ModelLibrary.DBModels.Task", "Task")
                        .WithMany("TaskPrecedenceTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_task_precedences_tasks2");

                    b.Navigation("Precedence");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.TasksSkillsRequired", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Skill", "Skill")
                        .WithMany("TasksSkillsRequireds")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_tasks_skills_skills");

                    b.HasOne("ModelLibrary.DBModels.Task", "Task")
                        .WithMany("TasksSkillsRequireds")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_tasks_skills_tasks");

                    b.Navigation("Skill");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.WorkforceSkill", b =>
                {
                    b.HasOne("ModelLibrary.DBModels.Skill", "Skill")
                        .WithMany("WorkforceSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_workforce_skills_skills");

                    b.HasOne("ModelLibrary.DBModels.Workforce", "Workforce")
                        .WithMany("WorkforceSkills")
                        .HasForeignKey("WorkforceId")
                        .IsRequired()
                        .HasConstraintName("FK_workforce_skills_workforce");

                    b.Navigation("Skill");

                    b.Navigation("Workforce");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.AtlassianToken", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Equipment", b =>
                {
                    b.Navigation("EquipmentsFunctions");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Function", b =>
                {
                    b.Navigation("EquipmentsFunctions");

                    b.Navigation("TaskFunctions");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Milestone", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Parameter", b =>
                {
                    b.Navigation("ParameterResources");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.PlanSubscription", b =>
                {
                    b.Navigation("PlanPermissions");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Project", b =>
                {
                    b.Navigation("Milestones");

                    b.Navigation("Parameters");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Skill", b =>
                {
                    b.Navigation("TasksSkillsRequireds");

                    b.Navigation("WorkforceSkills");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Task", b =>
                {
                    b.Navigation("TaskFunctions");

                    b.Navigation("TaskPrecedencePrecedences");

                    b.Navigation("TaskPrecedenceTasks");

                    b.Navigation("TasksSkillsRequireds");
                });

            modelBuilder.Entity("ModelLibrary.DBModels.Workforce", b =>
                {
                    b.Navigation("ParameterResources");

                    b.Navigation("WorkforceSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
